# -*- coding: utf-8 -*-
"""Accident-survival_Prediction_using_Naive-Bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10onmXJ-2ptRAk4bJZX2demR7lmwueMmq
"""

import pandas as pd
import numpy as np

from google.colab import files
uploaded = files.upload()

dataset = pd.read_csv('accident_survuve_predicttion (2).csv')

print(dataset.shape)
print(dataset.head(5))

#mappling the data to binary values
income_set = set(dataset['Sex'])
dataset['Sex'] = dataset['Sex'].map({'female':0, 'male':1}).astype(int)
print(dataset.head)

#segrating data set
X = dataset.drop('Survived',axis='columns')
X

Y = dataset.Survived
Y

#finding and removing the NA values 
X.columns[X.isna().any()]

# X.Age = X.Age.fillna(X.Age.mean())
# if there are any nan values then use the code

#test anain the nan values
X.columns[X.isna().any()]

#splitting the dataset into input and output
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25, random_state=0)

#training
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)

#predicting the person is survived or not
pclassNo = int(input("Enter the persons pclass number: "))
gender = int(input("Enter the persons gender (0 for female and 1 for male) : "))
age = int(input("Enter the persons age : "))
fare = float(input("Enter the persons fare: "))
person = [[pclassNo,gender,age,fare]]
result = model.predict(person)
print(result)

if result == 1:
  print("person might survived")
else:
  print("person not survived")

#predict for all the test data
y_pred = model.predict(X_test)
print(np.column_stack((y_pred,y_test)))

#accuracy of the model
from sklearn.metrics import accuracy_score
print("accoracy of the model: {0}%".format(accuracy_score(y_test, y_pred)*100))